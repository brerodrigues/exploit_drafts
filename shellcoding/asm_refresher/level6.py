import glob
from pwn import *

"""
Another cool concept in x86 is the independent access to lower register bytes.
Each register in x86 is 64 bits in size, in the previous levels we have accessed
the full register using rax, rdi or rsi. We can also access the lower bytes of
each register using different register names. For example the lower
32 bits of rax can be accessed using eax, lower 16 bits using ax,
lower 8 bits using al, etc.
MSB                                    LSB
+----------------------------------------+
|                   rax                  |
+--------------------+-------------------+
                     |        eax        |
                     +---------+---------+
                               |   ax    |
                               +----+----+
                               | ah | al |
                               +----+----+
Lower register bytes access is applicable to all registers_use.

Using only the following instruction(s):
mov
Please compute the following:
rax = rdi modulo 256
rbx = rsi module 65536
rdi = 0xeb9f
rsi = 0x9fe773ce

60319 modulo 256 = 159 = 9f
2682745806 modulo 65536 = 29.646 = 73ce
"""

context.arch = "x86_64"
#context.log_level = "DEBUG"

# rdi / rsi -> put rdi in rax, div rsi, resultado estara em rax, resto estara em rdx
# pwntools will change SYS_exit to the respective syscall
assembly = """
    mov rax, rdi
    mov ah, dh
    mov bx, si
"""

shellcode = asm(assembly)
#print(disasm(shellcode))

#p = process(['/challenge/embryoasm_level6', 'DEBUG'])
p = process(['/challenge/embryoasm_level6'])
print(p.recv(timeout=2).decode())
p.send(shellcode)
print(p.interactive())