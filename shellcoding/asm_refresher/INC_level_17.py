import glob
from pwn import *

"""
https://www.cs.virginia.edu/~evans/cs216/guides/x86.html

Earlier, you learned how to manipulate data in a pseudo-control way, but x86 gives us actual
instructions to manipulate control flow directly. There are two major ways to manipulate control
flow: 1. through a jump; 2. through a call. In this level, you will work with jumps. There are
two types of jumps:
1. Unconditional jumps
2. Conditional jumps
Unconditional jumps always trigger and are not based on the results of earlier instructions.
As you know, memory locations can store data and instructions. You code will be stored at 0x400066 (this will change each run).
For all jumps, there are three types:
1. Relative jumps
2. Absolute jumps
3. Indirect jumps
In this level we will ask you to do both a relative jump and an absolute jump. You will do a relative
jump first, then an absolute one. You will need to fill space in your code with something to make this
relative jump possible. We suggest using the `nop` instruction. It's 1 byte and very predictable.
Useful instructions for this level is:
jmp (reg1 | addr | offset) ; nop
Hint: for the relative jump, lookup how to use `labels` in x86.


[*] Switching to interactive mode
Using the above knowledge, perform the following:
Create a two jump trampoline:
1. Make the first instruction in your code a jmp
2. Make that jmp a relative jump to 0x51 bytes from its current position
3. At 0x51 write the following code:
4. Place the top value on the stack into register rdi
5. jmp to the absolute address 0x403000

We will now set the following in preparation for your code:
- Loading your given gode at: 0x400066
- (stack) [0x7fffff1ffff8] = 0x3f
"""

context.arch = "x86_64"
#context.log_level = "DEBUG"

# pwntools will change SYS_exit to the respective syscall
nop_sleed = "nop\n" * 0x49
assembly = """
    jmp relative

    relative:
        """ + nop_sleed + """
        pop rdi
        mov rax, 0x403000
        jmp rax
"""

shellcode = asm(assembly)
#print(disasm(shellcode))

p = process(['/challenge/embryoasm_level17', 'DEBUG'])
print(p.recv(timeout=2).decode())
p.send(shellcode)
print(p.interactive())
