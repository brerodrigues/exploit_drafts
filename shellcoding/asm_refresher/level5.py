import glob
from pwn import *

"""
Modulo in assembly is another interesting concept! x86 allows you to get the
remainder after doing a division on something. For instance:
10 / 3  ->  remainder = 1
You can get the remainder of a division using the instructions introduced earlier
through the div instruction.
In most programming languages we refer to mod with the symbol '%'.
div
mov rax, reg1; div reg2 Notice: to use this instruction you need to first load rax with the desired register
you intended to be the divided. Then run div reg2, where reg2 is the divisor. This
results in:
rax = rdi / rsi; rdx = remainder
The quotient is placed in rax, the remainder is placed in rdx.
"""

context.arch = "amd64"
#context.log_level = "DEBUG"

# rdi / rsi -> put rdi in rax, div rsi, resultado estara em rax, resto estara em rdx
# pwntools will change SYS_exit to the respective syscall
assembly = """
    mov rax, rdi
    div rsi
    mov rax, rdx
"""

shellcode = asm(assembly, arch="amd64", os="linux")
#print(disasm(shellcode))

p = process(glob.glob('/challenge/embry*'))
print(p.recv(timeout=2).decode())
p.send(shellcode)
print(p.recvall().decode())