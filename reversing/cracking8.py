#8teaching
def hex_list_to_str(list_hex):
    string_key = ''
    
    for hex_value in list_hex:
        string_key = string_key + chr(int(hex_value, 16))
    
    return string_key
    
def crack_key(list_hex):
    key = []
    
    # magic xor
    for idx, hex_value in enumerate(list_hex):
        decisions = (idx - (idx >> 0x1f) and 1) + (idx >> 0x1f) # this is wrong

        if decisions == 0 or (decisions == 1 and (idx % 2 == 0)): # this aditional 'or' fix the wrong, but without really understand why :(
            key_value = (hex_value^0xc7)
        elif decisions == 1:
            key_value = (hex_value^0x81)
        else:
            print('should never happen')

        other_decisions = idx % 3

        if other_decisions == 2:
            key_value = hex(key_value ^0xe4)
        elif other_decisions == 0:
            key_value = hex(key_value ^0x15)
        elif other_decisions == 1:
            key_value = hex(key_value ^0x9d)
        else:
            print('should neve happern')

        key.append(key_value)
            
    return key

encoded_key = [0xb5,0x77,0x4a,0xe6,0x35,0x16,0xb9,0x77,0x56,0xf3,0x3c,0x04,0xb5,0x6a,0x5b,0xff]
cracked_key_hex = crack_key(encoded_key)
decoded_key = hex_list_to_str(cracked_key_hex)
print (decoded_key[::-1]) # revert the string to get the right key
